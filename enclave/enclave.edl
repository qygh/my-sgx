/*
 * Copyright 2018 Alberto Sonnino
 * 
 * This file is part of SGX-WALLET.
 * 
 * SGX-WALLET is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * SGX-WALLET is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SGX-WALLET.  If not, see <http://www.gnu.org/licenses/>.
 */
 
enclave {
    // includes


    // define ECALLs
    trusted {
        public int ecall_test();

        /**
         * @brief      Initialise common context
         *
         * @param      n    The number of SNPs
         *
         * @return     0 if successful, negative otherwise.
         */
        public int ecall_common_initialise(
            uint32_t n
        );

        /**
         * @brief       Decode result
         *
         * @param[in]   result_data    The raw result data, should be 64 bytes
         *
         * @param[out]  decoded_result  Decoded result output, should be 8 bytes
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_decode_result(
            [in, size=64]const uint8_t *result_data,
            [out, size=8]uint64_t *decoded_result
        );

        /**
         * @brief      Initialise context for offline T
         *
         * @return     0 if successful, negative otherwise.
         */
        public int ecall_offline_t_initialise(
        );

        /**
         * @brief      Set Ws and compute cts
         *
         * @param[in]  Ws_data      Ws
         *
         * @param      Ws_data_size Size of Ws_data in bytes, should be n * 32 * 2 bytes
         *
         * @return     0 if successful, negative otherwise.
         */
        public int ecall_offline_t_set_Ws_and_compute_cts(
            [in, size=Ws_data_size]const uint8_t *Ws_data,
            size_t Ws_data_size
        );

        /**
         * @brief           Get x and cts
         *
         * @param[out]      x_data_sealed           Sealed x
         *
         * @param[in, out]  x_data_sealed_size      Size of sealed x buffer
         *
         * @param[out]      cts_data_sealed         Sealed cts
         *
         * @param[in, out]  cts_data_sealed_size    Size of sealed cts buffer
         *
         * @return          0 if successful, negative otherwise.
         */
        public int ecall_offline_t_get_x_and_cts(
            [user_check]uint8_t *x_data_sealed,
            [in, out]size_t *x_data_sealed_size,
            [user_check]uint8_t *cts_data_sealed,
            [in, out]size_t *cts_data_sealed_size
        );

        /**
         * @brief      Initialise context for offline CA
         *
         * @return     0 if successful, negative otherwise.
         */
        public int ecall_offline_ca_initialise(
        );

        /**
         * @brief       Set ws and compute Ws
         *
         * @param       ws, should be n * 4 bytes
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_offline_ca_set_ws_and_compute_Ws(
            [user_check]uint32_t *ws
        );

        /**
         * @brief           Get d and Ws
         *
         * @param[out]      d_data_sealed           Sealed d
         *
         * @param[in, out]  d_data_sealed_size      Size of sealed d data
         *
         * @param[out]      Ws_data                 Ws
         *
         * @param           Ws_data_size            Size of Ws_data, should be n * 32 * 2 bytes
         *
         * @return          0 if successful, negative otherwise.
         */
        public int ecall_offline_ca_get_d_and_Ws(
            [user_check]uint8_t *d_data_sealed,
            [in, out]size_t *d_data_sealed_size,
            [out, size=Ws_data_size]uint8_t *Ws_data,
            size_t Ws_data_size
        );

        /**
         * @brief       Initialise context for online T
         *
         * @param[in]   x_data_sealed       Sealed x
         *
         * @param       x_data_sealed_size  Size of sealed x data
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_online_t_initialise(
            [in, size=x_data_sealed_size]const uint8_t *x_data_sealed,
            size_t x_data_sealed_size
        );

        /**
         * @brief       Unseal cts
         *
         * @param[in]   cts_data_sealed         Sealed cts
         *
         * @param       cts_data_sealed_size    Size of sealed cts data
         *
         * @param[out]  cts_data                Unsealed cts
         *
         * @param       cts_data_size           Size of unsealed cts data, should be n * 32 * 4 bytes
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_online_t_unseal_cts(
            [in, size=cts_data_sealed_size]const uint8_t *cts_data_sealed,
            size_t cts_data_sealed_size,
            [out, size=cts_data_size]uint8_t *cts_data,
            size_t cts_data_size
        );

        /**
         * @brief       Set res and compute result
         *
         * @param[in]   res_data    res, should be 128 bytes
         *
         * @param[out]  result_data result, should be 64 bytes
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_online_t_set_res_and_get_result(
            [in, size=128]const uint8_t *res_data,
            [out, size=64]uint8_t *result_data
        );

        /**
         * @brief       Initialise context for online U
         *
         * @param[in]   snps    SNPs
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_online_u_initialise(
            [user_check]const uint8_t *snps
        );

        /**
         * @brief       Set cts and compute ctres, pres and sres
         *
         * @param[in]   cts_data        cts
         *
         * @param       cts_data_size   Size of cts_data, should be n * 32 * 4 bytes
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_online_u_set_cts_and_compute_ctres_pres_sres(
            [in, size=cts_data_size]const uint8_t *cts_data,
            size_t cts_data_size
        );

        /**
         * @brief       Get ctres, pres and sres
         *
         * @param[out]  ctres_data      ctres, should be 32 * 4 bytes
         *
         * @param[out]  pres_data       pres
         *
         * @param[out]  sres_data       sres
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_online_u_get_ctres_pres_sres(
            [out, size=128]uint8_t *ctres_data,
            [out]uint64_t *pres_data,
            [out]uint64_t *sres_data
        );

        /**
         * @brief       Initialise context for online CA
         *
         * @param[in]   d_data_sealed       Sealed d
         *
         * @param       d_data_sealed_size  Size of sealed d data
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_online_ca_initialise(
            [in, size=d_data_sealed_size]const uint8_t *d_data_sealed,
            size_t d_data_sealed_size
        );

        /**
         * @brief       Set ctres, pres, sres and compute res
         *
         * @param[in]   ctres_data      ctres
         *
         * @param[in]   pres_data       pres
         *
         * @param[in]   sres_data       sres
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_online_ca_set_ctres_pres_sres_and_compute_res(
            [in, size=128]const uint8_t *ctres_data,
            [in]const uint64_t *pres_data,
            [in]const uint64_t *sres_data
        );

        /**
         * @brief       Get res
         *
         * @param[out]  res_data        res
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_online_ca_get_res(
            [out, size=128]uint8_t *res_data
        );
    };


    // define OCALLs
    untrusted {
        /**
         * @brief      Prints a message to the console. 
         *
         * @param[in]  str    The message to print
         *
         * @return     -
         */
        void ocall_debug_print(
            [in, string]const char* str
        );

        void ocall_print(
            [in, string]const char* str
        );
    };
};
