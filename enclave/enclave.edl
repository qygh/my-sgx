/*
 * Copyright 2018 Alberto Sonnino
 * 
 * This file is part of SGX-WALLET.
 * 
 * SGX-WALLET is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * SGX-WALLET is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SGX-WALLET.  If not, see <http://www.gnu.org/licenses/>.
 */
 
enclave {

    // includes
    include "wallet.h"


    // define ECALLs
    trusted {
        public int ecall_test_crypto();

        /**
         * @brief      Initialise common context
         *
         * @param      n    The number of SNPs
         *
         * @return     0 if successful, negative otherwise.
         */
        public int ecall_common_initialise(
            uint32_t n
        );

        /**
         * @brief      Initialise context for offline T
         *
         * @return     0 if successful, negative otherwise.
         */
        public int ecall_offline_t_initialise(
        );

        /**
         * @brief      Set Ws and compute cts
         *
         * @param[in]  Ws_data      Ws
         *
         * @param      Ws_data_size Size of Ws_data in bytes, should be n * 32 * 2 bytes
         *
         * @return     0 if successful, negative otherwise.
         */
        public int ecall_offline_t_set_Ws_and_compute_cts(
            [in, size=Ws_data_size]const uint8_t *Ws_data,
            size_t Ws_data_size
        );

        /**
         * @brief      Get x and cts
         *
         * @param[out]  x_data          x, should be 32 bytes
         *
         * @param[out]  cts_data        cts
         *
         * @param       cts_data_size   Size of cts, should be n * 32 * 4 bytes
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_offline_t_get_x_and_cts(
            [out, size=32]uint8_t *x_data,
            [out, size=cts_data_size]uint8_t *cts_data,
            size_t cts_data_size
        );

        /**
         * @brief      Initialise context for offline CA
         *
         * @return     0 if successful, negative otherwise.
         */
        public int ecall_offline_ca_initialise(
        );

        /**
         * @brief       Set ws and compute Ws
         *
         * @param       ws, should be n * 4 bytes
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_offline_ca_set_ws_and_compute_Ws(
            [user_check]uint32_t *ws
        );

        /**
         * @brief       Get d and Ws
         *
         * @param[out]  d_data          d, should be 32 bytes
         *
         * @param[out]  Ws_data         Ws
         *
         * @param       Ws_data_size    Size of Ws_data, should be n * 32 * 2 bytes
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_offline_ca_get_d_and_Ws(
            [out, size=32]uint8_t *d_data,
            [out, size=Ws_data_size]uint8_t *Ws_data,
            size_t Ws_data_size
        );

        /**
         * @brief       Initialise context for online T
         *
         * @param[in]   x_data    x
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_online_t_initialise(
            [in, size=32]const uint8_t *x_data
        );

        /**
         * @brief       Initialise context for online U
         *
         * @param[in]   snps    SNPs
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_online_u_initialise(
            [user_check]const uint8_t *snps
        );

        /**
         * @brief       Set cts and compute ctres, pres and sres
         *
         * @param[in]   cts_data        cts
         *
         * @param       cts_data_size   Size of cts_data, should be n * 32 * 4 bytes
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_online_u_set_cts_and_compute_ctres_pres_sres(
            [in, size=cts_data_size]const uint8_t *cts_data,
            size_t cts_data_size
        );

        /**
         * @brief       Get ctres, pres and sres
         *
         * @param[out]  ctres_data      ctres, should be 32 * 4 bytes
         *
         * @param[out]  pres_data       pres
         *
         * @param[out]  sres_data       sres
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_online_u_get_ctres_pres_sres(
            [out, size=128]uint8_t *ctres_data,
            [out]uint64_t *pres_data,
            [out]uint64_t *sres_data
        );

        /**
         * @brief       Initialise context for online CA
         *
         * @param[in]   d_data      d
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_online_ca_initialise(
            [in, size=32]const uint8_t *d_data
        );

        /**
         * @brief       Set ctres, pres, sres and compute res
         *
         * @param[in]   ctres_data      ctres
         *
         * @param[in]   pres_data       pres
         *
         * @param[in]   sres_data       sres
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_online_ca_set_ctres_pres_sres_and_compute_res(
            [in, size=128]const uint8_t *ctres_data,
            [in]const uint64_t *pres_data,
            [in]const uint64_t *sres_data
        );

        /**
         * @brief       Get res
         *
         * @param[out]  res_data        res
         *
         * @return      0 if successful, negative otherwise.
         */
        public int ecall_online_ca_get_res(
            [out, size=64]uint8_t *res_data
        );





        /**
         * @brief      Creates a new wallet with the provided master-password.
         *
         * @param[in]  master_password    The wallet's master-password
         *
         * @return     Truthy if successful, error code otherwise.
         */
        public int ecall_create_wallet(
            [in, string]const char* master_password
        );


        /**
         * @brief      Provides the wallet content. The sizes/length of 
         *             pointers need to be specified, otherwise SGX will
         *             assume a count of 1 for all pointers.
         *
         * @param[in]  master_password    The wallet's master-password
         * @param[out] wallet             The wallet's content
         * @param[in]  wallet_size        The wallet's size
         *
         * @return     Truthy if successful, error code otherwise.
         */
        public int ecall_show_wallet(
            [in, string]const char* master_password, 
            [out, size=wallet_size] wallet_t* wallet,
            size_t wallet_size
        );


        /**
         * @brief      Changes the wallet's master-password.
         *
         * @param[in]  old_password    The wallet's old master-password
         * @param[in]  new_password    The wallet's new master-password
         *
         * @return     Truthy if successful, error code otherwise.
         */
        public int ecall_change_master_password(
            [in, string]const char* old_password, 
            [in, string]const char* new_password
        );


        /**
         * @brief      Adds an item to the wallet. The sizes/length of 
         *             pointers need to be specified, otherwise SGX will
         *             assume a count of 1 for all pointers.
         *
         * @param[in]  master_password    The wallet's master-password
         * @param[in]  item               The item's content
         * @param[in]  item_size          The item's size
         *
         * @return     Truthy if successful, error code otherwise.
         */
        public int ecall_add_item(
            [in, string]const char* master_password, 
            [in, size=item_size]const item_t* item,
            size_t item_size
        );


        /**
         * @brief      Removes an item from the wallet. The sizes/length of 
         *             pointers need to be specified, otherwise SGX will
         *             assume a count of 1 for all pointers.
         *
         * @param[in]  master_password    The wallet's master-password
         * @param[in]  index              The index of the item to remove
         *
         * @return     Truthy if successful, error code otherwise.
         */
        public int ecall_remove_item(
            [in, string]const char* master_password, 
            int index
        );
    };


    // define OCALLs
    untrusted {
        /**
         * @brief      Prints a message to the console. 
         *
         * @param[in]  str    The message to print
         *
         * @return     -
         */
        void ocall_debug_print(
            [in, string]const char* str
        );


        /**
         * @brief      Save sealed data to file The sizes/length of 
         *             pointers need to be specified, otherwise SGX will
         *             assume a count of 1 for all pointers.
         *
         * @param[in]  sealed_data    The data to save 
         * @param[in]  sealed_size    The size of the supplied data
         *
         * @return     Truthy if successful, error code otherwise.
         */
        int ocall_save_wallet(
            [in, size=sealed_size]const uint8_t* sealed_data, 
            size_t sealed_size
        );


        /**
         * @brief      Load sealed data from file The sizes/length of 
         *             pointers need to be specified, otherwise SGX will
         *             assume a count of 1 for all pointers.
         *
         * @param[out] sealed_data    The retrieved data 
         * @param[in]  sealed_size    The size of the data
         *
         * @return     Truthy if successful, error code otherwise.
         */
        int ocall_load_wallet(
            [out, size=sealed_size]uint8_t* sealed_data, 
            size_t sealed_size
        );


        /**
         * @brief      Verifies if a wallet files exists.
         *
         * @param      - 
         *
         * @return     Truthy if data exists, falsy otherwise.
         */
        int ocall_is_wallet(void);
    };
};
